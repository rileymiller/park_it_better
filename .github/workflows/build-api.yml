name: build-api

on:
  push:
    branches: 'master'
    tags: '*'
    paths:
      - '.github/workflows/build-api.yml'
      - 'api/**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./api

    steps:
      -
        name: Prepare
        id: prepare
        run: |
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v7
          echo ::set-output name=docker_username::tylerdoll
          echo ::set-output name=docker_image::tylerdoll/park_it_better_api
      -
        # https://github.com/crazy-max/ghaction-docker-buildx
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      -
        # https://github.com/actions/checkout
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8.3
      -
        name: Install dependencies
        working-directory: ${{env.working-directory}}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      -
        name: Format with black
        working-directory: ${{env.working-directory}}
        run: black --check --diff -q api
      -
        name: Lint with flake8
        working-directory: ${{env.working-directory}}
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 api --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 api --count --exit-zero --max-complexity=10 --statistics
      -
        name: Test with pytest
        working-directory: ${{env.working-directory}}
        run: pytest
      -
        name: Docker Login
        if: success()
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin
      -
        name: Docker Buildx
        if: success()
        working-directory: ${{env.working-directory}}
        run: |
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=true" \
            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
            --file Dockerfile .
      -
        name: Clear
        if: always()
        run: |
          rm -f ${HOME}/.docker/config.json
